#!/usr/bin/env python3
"""
Load full ratings.dat and create partitions
"""
import time
import os
from Interface import *

def load_full_ratings_and_partition():
    """Load full ratings.dat and create partitions"""
    
    if not os.path.exists('ratings.dat'):
        print("‚ùå File ratings.dat kh√¥ng t·ªìn t·∫°i!")
        return
    
    file_size = os.path.getsize('ratings.dat') / (1024 * 1024)  # MB
    print(f"üìÅ File ratings.dat: {file_size:.1f} MB")
    
    try:
        print("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß ratings.dat...")
        print("=" * 60)
        
        # Connect to database
        conn = getopenconnection(dbname='dds_assgn1')
        conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
        
        # 1. X√ìA T·∫§T C·∫¢ B·∫¢NG HI·ªÜN C√ì
        print("üßπ B∆∞·ªõc 1: X√≥a t·∫•t c·∫£ b·∫£ng hi·ªán c√≥...")
        cur = conn.cursor()
        cur.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'")
        tables = [row[0] for row in cur.fetchall()]
        
        if tables:
            print(f"   ƒêang x√≥a {len(tables)} b·∫£ng...")
            for table in tables:
                cur.execute(f"DROP TABLE IF EXISTS {table} CASCADE")
                print(f"     ‚úì ƒê√£ x√≥a {table}")
        else:
            print("   Kh√¥ng c√≥ b·∫£ng n√†o ƒë·ªÉ x√≥a")
        cur.close()
        
        # 2. LOAD D·ªÆ LI·ªÜU T·ª™ RATINGS.DAT
        print("\nüì• B∆∞·ªõc 2: Load d·ªØ li·ªáu t·ª´ ratings.dat...")
        start_time = time.time()
        loadratings('ratings', 'ratings.dat', conn)
        load_time = time.time() - start_time
        
        # ƒê·∫øm s·ªë records ƒë√£ load
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM ratings")
        total_records = cur.fetchone()[0]
        cur.close()
        
        print(f"   ‚úÖ Load ho√†n th√†nh!")
        print(f"   üìä ƒê√£ load: {total_records:,} records")
        print(f"   ‚è±Ô∏è  Th·ªùi gian: {load_time:.1f} gi√¢y")
        print(f"   üöÄ T·ªëc ƒë·ªô: {total_records/load_time:,.0f} records/gi√¢y")
        
        # 3. T·∫†O RANGE PARTITIONS
        print(f"\nüìä B∆∞·ªõc 3: T·∫°o Range Partitions...")
        num_partitions = 5
        print(f"   T·∫°o {num_partitions} range partitions d·ª±a tr√™n rating (0-5)...")
        
        start_time = time.time()
        rangepartition('ratings', num_partitions, conn)
        partition_time = time.time() - start_time
        
        print(f"   ‚úÖ Range partitioning ho√†n th√†nh!")
        print(f"   ‚è±Ô∏è  Th·ªùi gian: {partition_time:.1f} gi√¢y")
        
        # Hi·ªÉn th·ªã ph√¢n b·ªë d·ªØ li·ªáu trong range partitions
        cur = conn.cursor()
        print(f"   üìà Ph√¢n b·ªë d·ªØ li·ªáu Range Partitions:")
        delta = 5.0 / num_partitions
        total_in_partitions = 0
        
        for i in range(num_partitions):
            cur.execute(f"SELECT COUNT(*) FROM range_part{i}")
            count = cur.fetchone()[0]
            total_in_partitions += count
            
            minRange = i * delta
            maxRange = minRange + delta
            if i == 0:
                range_desc = f"[{minRange:.1f}, {maxRange:.1f}]"
            else:
                range_desc = f"({minRange:.1f}, {maxRange:.1f}]"
            
            percentage = (count / total_records) * 100
            print(f"     range_part{i}: {range_desc} -> {count:,} records ({percentage:.1f}%)")
        
        cur.close()
        
        # 4. T·∫†O ROUND ROBIN PARTITIONS
        print(f"\nüîÑ B∆∞·ªõc 4: T·∫°o Round Robin Partitions...")
        print(f"   T·∫°o {num_partitions} round robin partitions...")
        
        start_time = time.time()
        roundrobinpartition('ratings', num_partitions, conn)
        partition_time = time.time() - start_time
        
        print(f"   ‚úÖ Round robin partitioning ho√†n th√†nh!")
        print(f"   ‚è±Ô∏è  Th·ªùi gian: {partition_time:.1f} gi√¢y")
        
        # Hi·ªÉn th·ªã ph√¢n b·ªë d·ªØ li·ªáu trong round robin partitions
        cur = conn.cursor()
        print(f"   üìà Ph√¢n b·ªë d·ªØ li·ªáu Round Robin Partitions:")
        
        for i in range(num_partitions):
            cur.execute(f"SELECT COUNT(*) FROM rrobin_part{i}")
            count = cur.fetchone()[0]
            percentage = (count / total_records) * 100
            print(f"     rrobin_part{i}: {count:,} records ({percentage:.1f}%)")
        
        cur.close()
        
        # 5. KI·ªÇM TRA K·∫æT QU·∫¢ CU·ªêI C√ôNG
        print(f"\nüìã B∆∞·ªõc 5: T·ªïng k·∫øt...")
        cur = conn.cursor()
        cur.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name")
        final_tables = cur.fetchall()
        
        print(f"   üóÑÔ∏è  T·ªïng s·ªë b·∫£ng ƒë√£ t·∫°o: {len(final_tables)}")
        for table in final_tables:
            cur.execute(f"SELECT COUNT(*) FROM {table[0]}")
            count = cur.fetchone()[0]
            print(f"     ‚úì {table[0]}: {count:,} records")
        
        cur.close()
        conn.close()
        
        print("\n" + "=" * 60)
        print("üéâ HO√ÄN TH√ÄNH! D·ªØ li·ªáu ƒë·∫ßy ƒë·ªß ƒë√£ ƒë∆∞·ª£c load v√† ph√¢n m·∫£nh th√†nh c√¥ng!")
        print("üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ xem c√°c b·∫£ng trong pgAdmin:")
        print("   - ratings: B·∫£ng ch√≠nh ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu")
        print("   - range_part0-4: Ph√¢n m·∫£nh theo kho·∫£ng rating")
        print("   - rrobin_part0-4: Ph√¢n m·∫£nh round robin")
        print("   - partition_metadata: Metadata v·ªÅ c√°c partition")
        
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    load_full_ratings_and_partition()
